#include <iostream>
#include <string>
#include <stdio.h>
using namespace std;

/*
Написать программу для работы с массивами. Программа должна
содержать меню и позволять проводить повторные вычисления. Алгоритмы должны
быть реализованы с помощью функций. В программе необходимо задавать размер
массивов и выделять под них память динамически. Заполнять массив двумя
способами: случайными числами и по порядку от x1 с шагом k. Выводить массивы и
другую информацию на дисплей.
Для получения минимального балла достаточно сделать статические
массивы, а в алгоритме вставки дополнительных элементов размер массива
можно не увеличивать.

Написать программу для работы с целочисленным массивом. Удалить из
массива все элементы, которые больше половины максимального значения.
Вывести массив на дисплей. Найти все минимальные элементы и добавить после
них максимальное значение. Вывести массив на дисплей. Переставить в начало
массива все числа, кратные 5. Вывести массив на дисплей.

-найти и удалить все элементы, которые больше половины максимального значения
-вывести массив на дисплей
-найти все минимальные элементы и добавить после них максимальное значение
-вывести массив на дисплей
-переставить в начало массива все числа % 5
-вывести массив на дисплей
*/

int maxelem(int* arr, int n){
    int max = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }
    return max;
}

int minelem(int* arr, int n){
    int min = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] < min) {
            min = arr[i];
        }
    }
    return min;
}

void recombinateArray(int* arr, int n){
    int count = 0;
    for (int i = 0; i < n; i++) {
        if (arr[i] % 5 == 0) {
            int temp = arr[i];
            for (int j = i; j > count; j--) {
                arr[j] = arr[j - 1];
            }
            arr[count] = temp;
            count++;
        }
    }
}

int main() {
    int n;
	
	// Ввод размера массива
    printf("Введите размер массива: ");
    scanf("%d", &n);
	
    int* arr = new int[n];

    printf("Введите элементы массива:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    // Находим максимальное значение
    int max = maxelem(arr, n);

    // Удаляем элементы, которые больше половины максимального значения
    for (int i = 0; i < n; i++) {
        if (arr[i] > max / 2) {
            for (int j = i; j < n - 1; j++) {
                arr[j] = arr[j + 1];
            }
            n--;  // Уменьшаем размер массива
            i--;  // Возвращаемся к предыдущему индексу
        }
    }

    // Выводим массив
    printf("Массив после удаления элементов:\n");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    // Находим минимальное значение
    int min = minelem(arr, n);

    // Добавляем максимальное значение после всех минимальных элементов
    for (int i = 0; i < n; i++) {
        if (arr[i] == min) {
            // Расширяем массив на 1 элемент
            arr = (int*)realloc(arr, (n + 1) * sizeof(int));

            // Сдвигаем все элементы после текущего на одну позицию вправо
            for (int j = n; j > i + 1; j--) {
                arr[j] = arr[j - 1];
            }

            // Вставляем максимальное значение после текущего
            arr[i + 1] = max;

            // Увеличиваем размер массива
            n++;
            i++;  // Пропускаем только что добавленный элемент
        }
    }

    // Выводим массив
    printf("Массив после добавления максимального значения:\n");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    // Переставляем в начало массива все числа % 5
    recombinateArray(arr, n);

    // Выводим массив
    printf("Массив после перестановки чисел % 5:\n");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    // Освобождаем выделенную память
    free(arr);

    return 0;
}


